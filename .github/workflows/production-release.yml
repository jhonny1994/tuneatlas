name: Production Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Release notes for this version"
        required: false
        default: "Bug fixes and improvements"

env:
  FLUTTER_VERSION: "3.35.3"
  JAVA_VERSION: "17"

jobs:
  # Code quality checks
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run code generation
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

  # Build signed Android App Bundle for Google Play
  build-production:
    name: Build Production Release
    runs-on: ubuntu-latest
    needs: analyze

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "gradle"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run code generation
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Get version from pubspec
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version $VERSION"

      - name: Validate keystore secret
        run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Error: KEYSTORE_BASE64 secret is not set or is empty"
            exit 1
          fi
          echo "Keystore secret is present"

      - name: Decode keystore
        run: |
          echo "Creating keystore in android/app/"
          mkdir -p android/app
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/tuneatlas-keystore.jks

          # Verify the file was created
          if [ ! -f android/app/tuneatlas-keystore.jks ]; then
            echo "ERROR: Keystore file was not created"
            exit 1
          fi

          if [ ! -s android/app/tuneatlas-keystore.jks ]; then
            echo "ERROR: Keystore file is empty"
            exit 1
          fi

          # Show file details
          ls -lh android/app/tuneatlas-keystore.jks
          file android/app/tuneatlas-keystore.jks
          echo "Keystore decoded successfully"

      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=tuneatlas-keystore.jks
          EOF
          echo "key.properties created:"
          cat android/key.properties

      - name: Verify keystore with keytool
        run: |
          keytool -list -v -keystore android/app/tuneatlas-keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" || echo "Warning: Could not verify keystore"

      - name: Debug file structure
        run: |
          echo "=== Checking file structure ==="
          ls -la android/ || true
          ls -la android/app/ || true
          echo "=== Keystore file ==="
          file android/app/tuneatlas-keystore.jks || echo "Keystore not found"
          echo "=== key.properties content ==="
          cat android/key.properties || echo "key.properties not found"
          echo "=== Testing Gradle keystore resolution ==="
          cd android && ./gradlew :app:tasks --all | grep -i sign || true

      - name: Build App Bundle (AAB)
        run: flutter build appbundle --release

      - name: Build APK
        run: flutter build apk --release

      - name: Rename outputs
        run: |
          cd build/app/outputs
          # Rename AAB
          mv bundle/release/app-release.aab bundle/release/TuneAtlas-v${{ steps.version.outputs.version }}.aab
          # Rename APK
          mv flutter-apk/app-release.apk flutter-apk/TuneAtlas-v${{ steps.version.outputs.version }}.apk

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle
          path: build/app/outputs/bundle/release/TuneAtlas-*.aab
          retention-days: 90

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-apk
          path: build/app/outputs/flutter-apk/TuneAtlas-*.apk
          retention-days: 90

      - name: Clean up secrets
        if: always()
        run: |
          rm -f android/app/tuneatlas-keystore.jks
          rm -f android/key.properties

      - name: Create Production Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/bundle/release/TuneAtlas-*.aab
            build/app/outputs/flutter-apk/TuneAtlas-*.apk
          tag: v${{ steps.version.outputs.version }}
          name: "TuneAtlas v${{ steps.version.outputs.version }}"
          body: |
            ## 🎵 TuneAtlas v${{ steps.version.outputs.version }} - Production Release

            **Version:** ${{ steps.version.outputs.version }}  
            **Build Number:** ${{ github.run_number }}  
            **Commit:** ${{ github.sha }}

            ### 📦 Downloads
            - **TuneAtlas.aab** - For Google Play Store upload
            - **TuneAtlas.apk** - For direct installation

            ### 📝 What's New
            ${{ github.event.inputs.release_notes }}

            ### 🚀 Installation
            **Google Play Store (Recommended)**
            - Upload the .aab file to Google Play Console

            **Direct APK Installation**
            1. Download the APK file
            2. Enable "Install from Unknown Sources" in Settings
            3. Install and enjoy! 🎧

            ---

            *This is a production release signed with the upload key and ready for distribution.*
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          allowUpdates: false
          makeLatest: true
